function cl(x) {
  console.log(x);
}
function inputC(ic){
    // for each element in the ic object
    for (let id in ic) {
     var el = document.getElementById(id);
      
      // fns is an object with input type keys and function values
      var fns = ic[id];
      
      // for each input type in the object
      for (let type in fns) {
      
        // arr is array of functions to add for that input type
        var arr = fns[type];
        
        for (let theFn in arr) {
        //
        // FN is function
          var FN = arr[theFn];
        el.addEventListener(type, FN);
      } 
        // Add listener to element that will update model or view
      }
  
    }
  }
function listen(el, type, fn) {
    el.addEventListener(type, fn);
}
function listenAt(id, type, fn) {
  var id = document.getElementById(id)
  id.addEventListener(type, fn);
}
function setAttr(el, attr, value) {
  el.setAttribute(attr, value);
}
function post(el) {
  document.body.innerHTML = '';
  document.body.appendChild(el);
}
function htmlElShort(type) {
  switch(type) {
      case 'p' : type = 'p'; break;
      case 'i' : type = 'img'; break;
      case 'btn' : type = 'button'; break;
      case 'in' : type = 'input'; break;
        default : type = 'div'; break;
    }
  return type;
}
var doc = {
  ce : function(type) {
      type = htmlElShort(type);
      return document.createElement(type);
  },
  ctn : function(text) {
    return document.createTextNode(text);
  },
  ac : function(el, type) {
    type = htmlElShort(type);
    var child = document.createElement(type);
    el.appendChild(child);
    return child;
},
  atn : function(el, text) {
    var text = document.createTextNode(text);
    el.appendChild(text);
  },
  amc : function(el, arr) {
    for (var child of arr) {
      el.appendChild(child);
    }
  },
  class : function(name) {
    return document.getElementsByClassname(name);
  },
  id : function(id) {
    return document.getElementById(id);
  }
};
function idListen(id, type,fn) {
  doc.id(id).listenAt(id, type, fn);
}
function ceListen(elmType, evtType, fn) {
  var x = doc.ce(elmType);
  listen(x, evtType, fn);
  return x;
}
function borderDiv(color, width, height) {
  var elm = doc.ce();
  elm.style.border = 'solid '+color;
  elm.style.width = width+'vw';
  elm.style.height = height+'vh';
  return elm;
}
